"""
Django settings for vimp project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(int(os.getenv('DEBUG', default="0")))

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', default='localhost,127.0.0.1').split(',')

CORS_ORIGIN_ALLOW_ALL = True

# CSRF_TRUSTED_ORIGINS = ['localhost:3000', '20.101.63.100', "*.wajesmarthrms.website"]

AUTH_USER_MODEL = 'core_service.CustomUser'

# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_USE_TLS = True
EMAIL_HOST = os.getenv("SMTP_HOST")
EMAIL_PORT = os.getenv("SMTP_PORT")
EMAIL_HOST_USER = os.getenv("EMAIL_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_PASSWORD")

USE_L10N = False
USE_THOUSAND_SEPARATOR = True

# Application definition
INSTALLED_APPS = [
	'unfold',
	'django.contrib.admin',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',
	
	'rest_framework',
	'rest_framework_simplejwt',
	'corsheaders',
	'jsoneditor',
	'django_q',

	'core_service',
	'egrn_service',
	'invoice_service',
	'approval_service',
	'byd_service',
	'app_settings',
]

JSON_EDITOR_JS = 'https://cdnjs.cloudflare.com/ajax/libs/jsoneditor/8.6.4/jsoneditor.js'
JSON_EDITOR_CSS = 'https://cdnjs.cloudflare.com/ajax/libs/jsoneditor/8.6.4/jsoneditor.css'

UNFOLD = {
	"SITE_ICON": lambda request: "https://foodconceptsplc.com/wp-content/uploads/2019/10/FoodConcepts_Favicon.png",
	"SITE_LOGO": lambda request: "https://foodconceptsplc.com/wp-content/uploads/2019/10/FoodConcepts_Logo-1.png",
	"SITE_FAVICONS": [
		{
			"rel": "icon",
			"sizes": "32x32",
			"type": "image/svg+xml",
			"href": lambda request: "https://foodconceptsplc.com/wp-content/uploads/2019/10/FoodConcepts_Favicon.png",
		},
	],
	"COLORS": {
		"primary": {
			"50": "235 242 250",
			"100": "199 217 240",
			"200": "158 186 225",
			"300": "117 154 210",
			"400": "41 87 164",
			"500": "76 123 195",
			"600": "41 87 164",
			"700": "33 70 131",
			"800": "25 52 98",
			"900": "16 35 66",
			"950": "8 17 33",
		},
	},
}

Q_CLUSTER = {
	'name': 'vimp_workers',
	'orm': 'default',
	'timeout': 300,  # 5 minutes timeout
	'retry': 360,   # 6 minutes retry (must be larger than timeout)
	'ack_failures': True,  # Acknowledge failures to prevent retries on permanent failures
	'max_attempts': 3,
	'save_limit': 1000,  # Increase save limit for task results
	'queue_limit': 500,  # Limit queue size to prevent memory issues
	'catch_up': False,  # Don't catch up on missed schedules
	'guard_cycle': 5,  # Check cluster health every 5 seconds
	'log_level': 'INFO', # Log level for the cluster
}

REST_FRAMEWORK = {
	'DEFAULT_AUTHENTICATION_CLASSES': (
		'rest_framework_simplejwt.authentication.JWTAuthentication',
		'django_auth_adfs.rest_framework.AdfsAccessTokenAuthentication',
		'rest_framework.authentication.SessionAuthentication',
		'rest_framework.authentication.BasicAuthentication',
	),
	'DEFAULT_PERMISSION_CLASSES': (
		'rest_framework.permissions.IsAuthenticated',
	),
	'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
	'PAGE_SIZE': 15
}

AUTHENTICATION_BACKENDS = (
	'django_auth_adfs.backend.AdfsAccessTokenBackend',
	'django.contrib.auth.backends.ModelBackend',
)

AUTH_ADFS = {
	'AUDIENCE': os.getenv('CLIENT_ID'),
	'CLIENT_ID': os.getenv('CLIENT_ID'),
	'CLIENT_SECRET': os.getenv('CLIENT_SECRET'),
	'CLAIM_MAPPING': {'first_name': 'given_name',
					  'last_name': 'family_name',
					  'email': 'upn'},
	'GROUPS_CLAIM': 'roles',
	'MIRROR_GROUPS': True,
	'USERNAME_CLAIM': 'upn',
	'TENANT_ID': os.getenv('TENANT_ID'),
	'RELYING_PARTY_ID': os.getenv('CLIENT_ID'),
	'LOGIN_EXEMPT_URLS': [
		'^api',
		'^admin'
	],
}

LOGGING = {
	'version': 1,
	'disable_existing_loggers': False,
	'formatters': {
		'verbose': {
			'format': '%(levelname)s %(asctime)s %(name)s %(message)s'
		},
	},
	'handlers': {
		'console': {
			'class': 'logging.StreamHandler',
			'formatter': 'verbose'
		},
	},
	'loggers': {
		'django_auth_adfs': {
			'handlers': ['console'],
			'level': 'WARNING',
		},
	},
}

SIMPLE_JWT = {
	'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
	'ACCESS_TOKEN_LIFETIME': timedelta(hours=5),
	'ROTATE_REFRESH_TOKENS': True,
	'BLACKLIST_AFTER_ROTATION': True,
	'UPDATE_LAST_LOGIN': True,
	'ALGORITHM': 'HS256',
	'SIGNING_KEY': SECRET_KEY,
	'AUTH_HEADER_TYPES': ('Bearer',),
	'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
	'USER_ID_FIELD': 'username',
	'USER_ID_CLAIM': 'username',
	'JTI_CLAIM': 'jti',
	'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
	"TOKEN_OBTAIN_SERIALIZER": "core_service.serializers.CustomTokenObtainPairSerializer",
}

MIDDLEWARE = [
	'django.middleware.security.SecurityMiddleware',
	'django.contrib.sessions.middleware.SessionMiddleware',
	'django.middleware.common.CommonMiddleware',
	'django.middleware.csrf.CsrfViewMiddleware',
	'django.contrib.auth.middleware.AuthenticationMiddleware',
	'django.contrib.messages.middleware.MessageMiddleware',
	'django.middleware.clickjacking.XFrameOptionsMiddleware',
	'corsheaders.middleware.CorsMiddleware',
]

ROOT_URLCONF = 'vimp.urls'

TEMPLATES = [
	{
		'BACKEND': 'django.template.backends.django.DjangoTemplates',
		'DIRS': [],
		'APP_DIRS': True,
		'OPTIONS': {
			'context_processors': [
				'django.template.context_processors.debug',
				'django.template.context_processors.request',
				'django.contrib.auth.context_processors.auth',
				'django.contrib.messages.context_processors.messages',
			],
		},
	},
]

WSGI_APPLICATION = 'vimp.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
	'default': {
		'ENGINE': os.getenv('DB_ENGINE'),
		'NAME': os.getenv('DB_NAME'),
		'USER': os.getenv('DB_USER'),
		'PASSWORD': os.getenv('DB_PASSWORD'),
		'HOST': os.getenv('DB_HOST'),
		'PORT': os.getenv('DB_PORT'),
	}
}

CELERY_BROKER_URL = "memory://localhost"

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
	{
		'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
	},
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
MEDIA_URL = 'media/'

MEDIA_ROOT = os.path.join(BASE_DIR, MEDIA_URL)
STATIC_ROOT = os.path.join(BASE_DIR, STATIC_URL)

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'